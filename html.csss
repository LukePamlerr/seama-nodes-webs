<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pterodactyl Server Creator</title>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.production.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.20.6/babel.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios@1.4.0/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/pterodactyl.js@0.7.3/dist/pterodactyl.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const App = () => {
      const [userApiKey, setUserApiKey] = useState('');
      const [isLoggedIn, setIsLoggedIn] = useState(false);
      const [userId, setUserId] = useState(null);
      const [serverName, setServerName] = useState('');
      const [eggId, setEggId] = useState('');
      const [nodeId, setNodeId] = useState('');
      const [email, setEmail] = useState('');
      const [username, setUsername] = useState('');
      const [password, setPassword] = useState('');
      const [eggs, setEggs] = useState([]);
      const [nodes, setNodes] = useState([]);
      const [servers, setServers] = useState([]);
      const [selectedServer, setSelectedServer] = useState(null);
      const [error, setError] = useState('');
      const [success, setSuccess] = useState('');
      const [loading, setLoading] = useState(false);
      const [showDeleteModal, setShowDeleteModal] = useState(false);
      const [serverToDelete, setServerToDelete] = useState(null);
      const [lastServerCreation, setLastServerCreation] = useState(null);

      // Initialize Pterodactyl client
      const getClient = (apiKey, asAdmin = false) =>
        new Pterodactyl.Builder()
          .setURL('YOUR_PTERODACTYL_URL') // e.g., https://panel.yourdomain.com
          .setAPIKey(apiKey || 'YOUR_ADMIN_API_KEY')
          [asAdmin ? 'asAdmin' : 'asUser']();

      // Fetch eggs, nodes, and user servers
      const fetchData = async (client) => {
        try {
          setLoading(true);
          const [eggResponse, nodeResponse, serverResponse] = await Promise.all([
            getClient('YOUR_ADMIN_API_KEY', true).getEggs(),
            getClient('YOUR_ADMIN_API_KEY', true).getNodes(),
            isLoggedIn ? client.getServers() : Promise.resolve([]),
          ]);
          setEggs(eggResponse);
          setNodes(nodeResponse);
          setServers(serverResponse);
          setEggId(eggResponse[0]?.id || '');
          setNodeId(nodeResponse[0]?.id || '');
        } catch (err) {
          setError('Failed to fetch data: ' + err.message);
        } finally {
          setLoading(false);
        }
      };

      // Handle user registration
      const handleRegister = async (e) => {
        e.preventDefault();
        if (!email || !username || !password) {
          setError('Please fill in all fields');
          return;
        }
        try {
          setLoading(true);
          const adminClient = getClient('YOUR_ADMIN_API_KEY', true);
          const userData = {
            email,
            username,
            first_name: username,
            last_name: '',
            password,
          };
          const user = await adminClient.createUser(userData);
          setSuccess('Account created! Please log in with your API key.');
          setEmail('');
          setUsername('');
          setPassword('');
        } catch (err) {
          setError('Failed to create account: ' + err.message);
        } finally {
          setLoading(false);
        }
      };

      // Handle login
      const handleLogin = async (e) => {
        e.preventDefault();
        if (!userApiKey) {
          setError('Please enter a valid API key');
          return;
        }
        try {
          setLoading(true);
          const client = getClient(userApiKey);
          const user = await client.getUser();
          setUserId(user.id);
          setIsLoggedIn(true);
          setError('');
          setSuccess('Logged in successfully!');
          fetchData(client);
        } catch (err) {
          setError('Invalid API key: ' + err.message);
        } finally {
          setLoading(false);
        }
      };

      // Handle server creation
      const handleCreateServer = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess('');

        // Rate limiting: 1 server per 5 minutes
        if (lastServerCreation && Date.now() - lastServerCreation < 5 * 60 * 1000) {
          setError('Please wait 5 minutes between server creations.');
          return;
        }

        if (!serverName || !eggId || !nodeId) {
          setError('Please fill in all fields');
          return;
        }

        try {
          setLoading(true);
          const adminClient = getClient('YOUR_ADMIN_API_KEY', true);
          const serverData = {
            name: serverName,
            user: userId,
            egg: parseInt(eggId),
            docker_image: 'quay.io/pterodactyl/core:java',
            startup: eggs.find((egg) => egg.id === parseInt(eggId))?.startup || '',
            environment: {},
            limits: {
              memory: 1024,
              swap: 0,
              disk: 5120,
              io: 500,
              cpu: 100,
            },
            feature_limits: {
              databases: 0,
              allocations: 1,
              backups: 0,
            },
            allocation: {
              default: nodeId,
            },
          };

          await adminClient.createServer(serverData);
          setSuccess('Server created successfully!');
          setServerName('');
          setLastServerCreation(Date.now());
          if (isLoggedIn) {
            fetchData(getClient(userApiKey));
          }
        } catch (err) {
          setError('Failed to create server: ' + err.message);
        } finally {
          setLoading(false);
        }
      };

      // Handle server actions
      const handleServerAction = async (serverId, action) => {
        try {
          setLoading(true);
          const client = getClient(userApiKey);
          if (action === 'start') {
            await client.startServer(serverId);
            setSuccess('Server started successfully!');
          } else if (action === 'stop') {
            await client.stopServer(serverId);
            setSuccess('Server stopped successfully!');
          } else if (action === 'delete') {
            setServerToDelete(serverId);
            setShowDeleteModal(true);
            return;
          }
          fetchData(client);
        } catch (err) {
          setError(`Failed to ${action} server: ` + err.message);
        } finally {
          setLoading(false);
        }
      };

      // Confirm server deletion
      const confirmDelete = async () => {
        try {
          setLoading(true);
          const client = getClient(userApiKey);
          await client.deleteServer(serverToDelete);
          setSuccess('Server deleted successfully!');
          setShowDeleteModal(false);
          setServerToDelete(null);
          fetchData(client);
        } catch (err) {
          setError('Failed to delete server: ' + err.message);
        } finally {
          setLoading(false);
        }
      };

      useEffect(() => {
        fetchData(getClient('YOUR_ADMIN_API_KEY', true));
      }, []);

      return (
        <div className="min-h-screen bg-gray-100 flex flex-col">
          {/* Navbar */}
          <nav className="bg-blue-600 text-white p-4 shadow-md">
            <div className="container mx-auto flex justify-between items-center">
              <h1 className="text-2xl font-bold">Seama Nodes</h1>
              <div className="space-x-4">
                <a href="#home" className="hover:underline">Home</a>
                {isLoggedIn && <a href="#dashboard" className="hover:underline">Dashboard</a>}
                {isLoggedIn ? (
                  <button
                    onClick={() => {
                      setIsLoggedIn(false);
                      setUserApiKey('');
                      setUserId(null);
                    }}
                    className="hover:underline"
                  >
                    Logout
                  </button>
                ) : (
                  <>
                    <a href="#login" className="hover:underline">Login</a>
                    <a href="#register" className="hover:underline">Register</a>
                  </>
                )}
              </div>
            </div>
          </nav>

          {/* Main Content */}
          <main className="container mx-auto p-6 flex-grow">
            {!isLoggedIn ? (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
                {/* Login Form */}
                <div className="bg-white p-6 rounded-lg shadow-md">
                  <h2 className="text-2xl font-semibold text-gray-800 mb-4">Login</h2>
                  <form onSubmit={handleLogin}>
                    <div className="mb-4">
                      <label htmlFor="apiKey" className="block text-gray-700 font-medium mb-2">
                        Pterodactyl API Key
                      </label>
                      <input
                        type="text"
                        id="apiKey"
                        value={userApiKey}
                        onChange={(e) => setUserApiKey(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        placeholder="Enter your API key"
                        required
                      />
                    </div>
                    {error && (
                      <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
                        {error}
                      </div>
                    )}
                    {success && (
                      <div className="mb-4 p-3 bg-green-100 text-green-700 rounded-md">
                        {success}
                      </div>
                    )}
                    <button
                      type="submit"
                      disabled={loading}
                      className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 disabled:bg-blue-400 transition-colors"
                    >
                      {loading ? 'Logging in...' : 'Login'}
                    </button>
                  </form>
                </div>

                {/* Register Form */}
                <div className="bg-white p-6 rounded-lg shadow-md">
                  <h2 className="text-2xl font-semibold text-gray-800 mb-4">Register</h2>
                  <form onSubmit={handleRegister}>
                    <div className="mb-4">
                      <label htmlFor="email" className="block text-gray-700 font-medium mb-2">
                        Email
                      </label>
                      <input
                        type="email"
                        id="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        placeholder="Enter your email"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="username" className="block text-gray-700 font-medium mb-2">
                        Username
                      </label>
                      <input
                        type="text"
                        id="username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        placeholder="Enter your username"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="password" className="block text-gray-700 font-medium mb-2">
                        Password
                      </label>
                      <input
                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        placeholder="Enter your password"
                        required
                      />
                    </div>
                    {error && (
                      <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
                        {error}
                      </div>
                    )}
                    {success && (
                      <div className="mb-4 p-3 bg-green-100 text-green-700 rounded-md">
                        {success}
                      </div>
                    )}
                    <button
                      type="submit"
                      disabled={loading}
                      className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 disabled:bg-blue-400 transition-colors"
                    >
                      {loading ? 'Registering...' : 'Register'}
                    </button>
                  </form>
                </div>
              </div>
            ) : (
              <>
                <h2 className="text-3xl font-semibold text-gray-800 mb-6">Dashboard</h2>
                {/* Server Creation Form */}
                <div className="bg-white p-6 rounded-lg shadow-md max-w-lg mx-auto mb-8">
                  <h3 className="text-xl font-semibold text-gray-800 mb-4">Create a Free Server</h3>
                  <form onSubmit={handleCreateServer}>
                    <div className="mb-4">
                      <label htmlFor="serverName" className="block text-gray-700 font-medium mb-2">
                        Server Name
                      </label>
                      <input
                        type="text"
                        id="serverName"
                        value={serverName}
                        onChange={(e) => setServerName(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        placeholder="Enter server name"
                        required
                      />
                    </div>
                    <div className="mb-4">
                      <label htmlFor="eggId" className="block text-gray-700 font-medium mb-2">
                        Game Type
                      </label>
                      <select
                        id="eggId"
                        value={eggId}
                        onChange={(e) => setEggId(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        required
                      >
                        <option value="">Select a game</option>
                        {eggs.map((egg) => (
                          <option key={egg.id} value={egg.id}>
                            {egg.name}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div className="mb-4">
                      <label htmlFor="nodeId" className="block text-gray-700 font-medium mb-2">
                        Node
                      </label>
                      <select
                        id="nodeId"
                        value={nodeId}
                        onChange={(e) => setNodeId(e.target.value)}
                        className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600"
                        required
                      >
                        <option value="">Select a node</option>
                        {nodes.map((node) => (
                          <option key={node.id} value={node.id}>
                            {node.name}
                          </option>
                        ))}
                      </select>
                    </div>
                    {error && (
                      <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
                        {error}
                      </div>
                    )}
                    {success && (
                      <div className="mb-4 p-3 bg-green-100 text-green-700 rounded-md">
                        {success}
                      </div>
                    )}
                    <button
                      type="submit"
                      disabled={loading}
                      className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 disabled:bg-blue-400 transition-colors"
                    >
                      {loading ? 'Creating...' : 'Create Server'}
                    </button>
                  </form>
                </div>

                {/* Server List */}
                <div className="bg-white p-6 rounded-lg shadow-md max-w-4xl mx-auto">
                  <h3 className="text-xl font-semibold text-gray-800 mb-4">Your Servers</h3>
                  {servers.length === 0 ? (
                    <p className="text-gray-600">No servers found.</p>
                  ) : (
                    <div className="grid gap-4">
                      {servers.map((server) => (
                        <div
                          key={server.id}
                          className="p-4 border rounded-md flex justify-between items-center"
                        >
                          <div>
                            <h4 className="text-lg font-medium text-gray-800">{server.name}</h4>
                            <p className="text-gray-600">
                              Status:{' '}
                              <span
                                className={`${
                                  server.status === 'running'
                                    ? 'text-green-600'
                                    : server.status === 'offline'
                                    ? 'text-red-600'
                                    : 'text-yellow-600'
                                }`}
                              >
                                {server.status || 'Unknown'}
                              </span>
                            </p>
                          </div>
                          <div className="space-x-2">
                            <button
                              onClick={() => setSelectedServer(server)}
                              className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
                            >
                              View
                            </button>
                            <button
                              onClick={() => handleServerAction(server.id, 'start')}
                              disabled={loading || server.status === 'running'}
                              className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 disabled:bg-green-400"
                            >
                              Start
                            </button>
                            <button
                              onClick={() => handleServerAction(server.id, 'stop')}
                              disabled={loading || server.status === 'offline'}
                              className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 disabled:bg-red-400"
                            >
                              Stop
                            </button>
                            <button
                              onClick={() => handleServerAction(server.id, 'delete')}
                              disabled={loading}
                              className="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 disabled:bg-gray-400"
                            >
                              Delete
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Server Details */}
                {selectedServer && (
                  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                    <div className="bg-white p-6 rounded-lg shadow-md max-w-lg w-full">
                      <h3 className="text-xl font-semibold text-gray-800 mb-4">
                        {selectedServer.name} Details
                      </h3>
                      <p className="text-gray-600 mb-2">
                        <strong>ID:</strong> {selectedServer.id}
                      </p>
                      <p className="text-gray-600 mb-2">
                        <strong>Status:</strong> {selectedServer.status || 'Unknown'}
                      </p>
                      <p className="text-gray-600 mb-2">
                        <strong>Memory:</strong> {selectedServer.limits.memory} MB
                      </p>
                      <p className="text-gray-600 mb-2">
                        <strong>Disk:</strong> {selectedServer.limits.disk} MB
                      </p>
                      <p className="text-gray-600 mb-2">
                        <strong>CPU:</strong> {selectedServer.limits.cpu}%
                      </p>
                      <p className="text-gray-600 mb-2">
                        <strong>IP:</strong>{' '}
                        {selectedServer.allocations?.[0]?.ip || 'Not assigned'}
                      </p>
                      <p className="text-gray-600 mb-4">
                        <strong>Port:</strong>{' '}
                        {selectedServer.allocations?.[0]?.port || 'Not assigned'}
                      </p>
                      <button
                        onClick={() => setSelectedServer(null)}
                        className="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700"
                      >
                        Close
                      </button>
                    </div>
                  </div>
                )}
              </>
            )}
          </main>

          {/* Footer */}
          <footer className="bg-gray-800 text-white p-4">
            <div className="container mx-auto text-center">
              <p>© 2025 Seama Nodes. All rights reserved.</p>
              <p className="mt-2">
                Powered by <a href="https://pterodactyl.io" className="underline">Pterodactyl</a>
              </p>
            </div>
          </footer>

          {/* Delete Confirmation Modal */}
          {showDeleteModal && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <div className="bg-white p-6 rounded-lg shadow-md max-w-sm w-full">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">
                  Confirm Deletion
                </h3>
                <p className="text-gray-600 mb-4">
                  Are you sure you want to delete this server? This action cannot be undone.
                </p>
                <div className="flex space-x-2">
                  <button
                    onClick={() => {
                      setShowDeleteModal(false);
                      setServerToDelete(null);
                    }}
                    className="flex-1 bg-gray-600 text-white p-2 rounded-md hover:bg-gray-700"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={confirmDelete}
                    disabled={loading}
                    className="flex-1 bg-red-600 text-white p-2 rounded-md hover:bg-red-700 disabled:bg-red-400"
                  >
                    {loading ? 'Deleting...' : 'Delete'}
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Loading Spinner */}
          {loading && (
            <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-600"></div>
            </div>
          )}
        </div>
      );
    };

    ReactDOM.render(<App />, document.getElementById('root'));
  </script>
</body>
</html>
